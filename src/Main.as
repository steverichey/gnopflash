package{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Mouse;	import XMLContainer;	import flash.events.MouseEvent;		public class Main extends MovieClip	{		public static const NAME : String = "Main";				private var desktopScreen:DesktopScreen;		private var splashScreen:SplashScreen;		private var playScreen:PlayScreen;		private var topMenu:TopMenu;		private var popup:Popup;		private var xmlContainer:XMLContainer;				public var playerSize:uint;		public var enemySize:uint;		public var ballSize:uint;		public static var ballSpeed:uint;		public static var difficultyLevel:uint;		public var scoreToWin:uint;		public var playerServesFirst:Boolean;		public var soundToggle:Boolean;				private var time:Time;		private var createdXML:Boolean;		private var topBG:Bitmap;		private var topBGData:BitmapData;				[Embed(source = "data/GNOP_Start.mp3")] private var StartGame:Class;		private var startGame:Sound = new StartGame;				[Embed(source = "data/GNOP_Lose.mp3")] private var LoseSound:Class;		private var loseSound:Sound = new LoseSound();				[Embed(source = "data/GNOP_Win.mp3")] private var WinSound:Class;		private var winSound:Sound = new WinSound();				private var sfxSoundChannel:SoundChannel;				[Embed(source = "data/desktop_bg.png")] public var DesktopBG:Class;		private var desktopBG:Bitmap = new DesktopBG();				[Embed(source="data/chicago.ttf",                 fontName = "chicago",                 mimeType = "application/x-font",                 fontWeight="normal",                 fontStyle="normal",                 unicodeRange="U+0020-U+007E",                 advancedAntiAliasing="true",                 embedAsCFF="false")]        private var chicagoEmbeddedFont:Class;				//[Embed(source = "data/chicago.ttf", fontFamily = "chicago", embedAsCFF = "false")] protected var junk:String;				public function Main()		{			if ( stage )			{				onAddtoStage();			}			else			{				addEventListener( Event.ADDED_TO_STAGE, onAddtoStage, false, 0, true );			}		}				public function onAddtoStage( e:Event = null ):void		{			removeEventListener( Event.ADDED_TO_STAGE, onAddtoStage );						// Put the generic background on the stage.						addChild( desktopBG );						xmlContainer = new XMLContainer();						// The listener needs to be added first, because otherwise if the XML is internally generated it will load			// before the event listener is even added.						xmlContainer.addEventListener( Event.COMPLETE, initMain, false, 0, true );			xmlContainer.loadXML();		}				public function initMain( e:Event ):void		{			setGameDefaults();						// If the XML specifies custom menu colors, implement them.						if ( XMLContainer.defaultXML.menu.display.@bgcolor != "0xFFFFFF" )			{				topBGData = new BitmapData( stage.stageWidth, 19, false, uint( XMLContainer.defaultXML.menu.display.@bgcolor ) );				topBG = new Bitmap( topBGData );				addChild( topBG );			}						// Put the clock on the stage.						time = new Time();			time.x = int( XMLContainer.defaultXML.display.time.@x );			time.y = int( XMLContainer.defaultXML.display.time.@y );			addChild( time );						// Show the desktop.						showDesktop();		}				public function setGameDefaults():void		{			// Set game variable defaults from XML data.						playerSize = XMLContainer.defaultXML.defaults.player.@size;			enemySize = XMLContainer.defaultXML.defaults.enemy.@size;						ballSize = XMLContainer.defaultXML.defaults.ball.@size;			ballSpeed = XMLContainer.defaultXML.defaults.ball.@speed;						difficultyLevel = uint( XMLContainer.defaultXML.defaults.difficulty.@value );			scoreToWin = XMLContainer.defaultXML.defaults.scoretowin.@value;			playerServesFirst = Boolean( uint( XMLContainer.defaultXML.defaults.playerservesfirst.@value ) );			soundToggle = Boolean( uint( XMLContainer.defaultXML.defaults.soundtoggle.@value ) );		}				public function showDesktop( e:NavigationEvent = null ):void		{			desktopScreen = new DesktopScreen();			addChild( desktopScreen );						Mouse.show();						// The only event that will usually happen on the desktop screen is to load the splash screen.			// This happens when the user double-clicks the GNOP! icon.						desktopScreen.addEventListener( Event.COMPLETE, onRequestSplash );						// If the game had to create an XML file, there exists an option to save the created file			// to the users' hard drive.						if ( XMLContainer.createdXML ) {				desktopScreen.addEventListener( NavigationEvent.SAVE, saveXML, false, 0, true );			}						setGameDefaults();						// Since the desktop screen can be called when either the loading screen is up (when the game first loads)			// or when the splash screen is up (if the user exits the game) we need to clear out both.			// Note that the functions check to see if these are on the stage before trying a removeChild.						removeSplashScreen();  // This is if we're going back to the desktop from the game.			removeTopMenu();  // If we're going back to the desktop from the game, we need to remove the top menu.						// This just ensures that mouse controls and the like are sent to the right place.						stage.focus = desktopScreen;		}				public function showSplashScreen( isGameOver:Boolean, playerWon:Boolean ):void		{			splashScreen = new SplashScreen( isGameOver, playerWon );			splashScreen.x = XMLContainer.defaultXML.display.splash.@x;			splashScreen.y = XMLContainer.defaultXML.display.splash.@y;			addChild( splashScreen );						Mouse.show();						if ( isGameOver )			{				if ( playerWon && soundToggle )				{					winSound = new WinSound();					sfxSoundChannel = winSound.play();					sfxSoundChannel.addEventListener( Event.SOUND_COMPLETE, showTopMenu, false, 0, true );				}				else if ( soundToggle )				{					loseSound = new LoseSound();					sfxSoundChannel = loseSound.play();					sfxSoundChannel.addEventListener( Event.SOUND_COMPLETE, showTopMenu, false, 0, true );				}				else				{					showTopMenu();				}			}			else			{				showTopMenu();			}						removePlayScreen();			removeDesktopScreen();		}				public function showPlayScreen():void		{			playScreen = new PlayScreen();			playScreen.addEventListener( NavigationEvent.WIN, onWin, false, 0, true );			playScreen.addEventListener( NavigationEvent.LOSE, onLose, false, 0, true );			playScreen.addEventListener( NavigationEvent.QUITGAME, onQuit, false, 0, true );			addChild( playScreen );						Mouse.hide();						//topMenu.setUsability( false );						removeSplashScreen();						stage.focus = playScreen;		}				public function showTopMenu( e:Event = null ):void		{			if ( topMenu == null )			{				topMenu = new TopMenu();				addChild( topMenu );								topMenu.addEventListener( NavigationEvent.ABOUT, onRequestPopup, false, 0, true );				topMenu.addEventListener( NavigationEvent.PLAY, onRequestPlay, false, 0, true );				topMenu.addEventListener( NavigationEvent.QUIT, showDesktop, false, 0, true );				topMenu.addEventListener( NavigationEvent.SETENDINGSCORE, onRequestPopup, false, 0, true );				topMenu.addEventListener( NavigationEvent.INSTRUCTIONS, onRequestPopup, false, 0, true );			}			else			{				topMenu.setUsability( true );				setChildIndex( topMenu, numChildren - 1 );			}						stage.focus = topMenu;		}				public function removeDesktopScreen():void		{			if ( desktopScreen != null )			{				removeChild( desktopScreen );				desktopScreen = null;			}		}				public function removeSplashScreen():void		{			if ( splashScreen != null )			{				removeChild( splashScreen );				splashScreen = null;			}		}				public function removePlayScreen():void		{			if ( playScreen != null )			{				removeChild( playScreen );				playScreen = null;			}		}				public function removeTopMenu():void		{			if ( topMenu != null )			{				removeChild( topMenu );				topMenu = null;			}		}				public function onRequestSplash( e:Event ):void		{			showSplashScreen( false, false );		}				public function onRequestPlay( navigationEvent:NavigationEvent ):void		{			topMenu.setUsability( false );						if ( soundToggle )			{				startGame = new StartGame();				sfxSoundChannel = startGame.play();				sfxSoundChannel.addEventListener( Event.SOUND_COMPLETE, onStartGameFinished, false, 0, true );			}			else			{				showPlayScreen();			}		}				public function onStartGameFinished( soundEvent:Event ):void		{			showPlayScreen();		}				public function onWin( navigationEvent:NavigationEvent ):void		{			removePlayScreen();			showSplashScreen( true, true );		}				public function onLose( navigationEvent:NavigationEvent ):void		{			removePlayScreen();			showSplashScreen( true, false );		}				public function onQuit( navigationEvent:NavigationEvent ): void		{			removePlayScreen();			showSplashScreen( false, false );		}				public function onRequestPopup( n:NavigationEvent ):void		{			topMenu.setUsability( false );			topMenu.dullHeaders();						var popupX:uint;			var popupY:uint;			var okX:uint;			var okY:uint;			var cncX:uint = 0;			var cncY:uint = 0;						if ( n.type == "about" )			{				popupX = XMLContainer.defaultXML.display.about.@x;				popupY = XMLContainer.defaultXML.display.about.@y;				okX = XMLContainer.defaultXML.display.about.@okayx;				okY = XMLContainer.defaultXML.display.about.@okayy;							}			else if ( n.type == "instructions" )			{				popupX = XMLContainer.defaultXML.display.instructions.@x;				popupY = XMLContainer.defaultXML.display.instructions.@y;				okX = XMLContainer.defaultXML.display.instructions.@okayx;				okY = XMLContainer.defaultXML.display.instructions.@okayy;			}			else if ( n.type == "setendingscore" )			{				popupX = XMLContainer.defaultXML.display.setendscore.@x;				popupY = XMLContainer.defaultXML.display.setendscore.@y;				okX = XMLContainer.defaultXML.display.setendscore.@okayx;				okY = XMLContainer.defaultXML.display.setendscore.@okayy;				cncX = XMLContainer.defaultXML.display.setendscore.@cancelx;				cncY = XMLContainer.defaultXML.display.setendscore.@cancely;			}						popup = new Popup( n.type.toString(), okX, okY, cncX, cncY );			popup.x = popupX;			popup.y = popupY;			addChild( popup );						popup.addEventListener( Event.COMPLETE, onClosePopUp, false, 0, true );		}				public function onClosePopUp( e:Event ):void		{			if ( popup != null )			{				removeChild( popup );				popup = null;			}						topMenu.brightHeaders();			topMenu.setUsability( true );						stage.focus = topMenu;		}				public function saveXML( n:NavigationEvent ):void		{			XMLContainer.saveXML();		}				public static function getBallSpeed():uint		{			return ballSpeed;		}				public static function changeBallSpeed( newSpeed:uint ):void		{			ballSpeed = newSpeed;		}				public static function getDifficulty():uint		{			return difficultyLevel;		}				public static function changeDifficulty( newDifficulty:uint ):void		{			difficultyLevel = newDifficulty;		}	}}