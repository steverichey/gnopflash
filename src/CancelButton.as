package{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Bitmap;		public class CancelButton extends Sprite	{		// This class replaces the cancel button. This prevents the mouse from becoming a hand.				[Embed(source = "data/cancel.png")] public var CancelBitmap:Class;		public var cancelBitmap:Bitmap = new CancelBitmap();				[Embed(source = "data/cancel_inv.png")] public var CancelInvBitmap:Class;		public var cancelInvBitmap:Bitmap = new CancelInvBitmap();				public function CancelButton()		{			if ( stage )			{				onAddtoStage();			}			else			{				addEventListener( Event.ADDED_TO_STAGE, onAddtoStage, false, 0, true );			}		}				public function onAddtoStage( e:Event = null ):void		{			removeEventListener( Event.ADDED_TO_STAGE, onAddtoStage );						addChild( cancelBitmap );			cancelInvBitmap.visible = false;			addChild( cancelInvBitmap );						addEventListener( MouseEvent.MOUSE_DOWN, onDownCancel, false, 0, true );		}				public function onDownCancel( mouseEvent:MouseEvent ):void		{			removeEventListener( MouseEvent.MOUSE_DOWN, onDownCancel );			removeEventListener( MouseEvent.ROLL_OVER, onDownCancel );						cancelInvBitmap.visible = true;						addEventListener( MouseEvent.MOUSE_UP, onUpCancel, false, 0, true );			addEventListener( MouseEvent.ROLL_OUT, onOutCancel, false, 0, true );						stage.removeEventListener( MouseEvent.MOUSE_UP, onCancelStageUp );		}				public function onUpCancel( mouseEvent:MouseEvent ):void		{			removeEventListener( MouseEvent.MOUSE_UP, onUpCancel );						removeEventListener( MouseEvent.ROLL_OUT, onOutCancel );						dispatchEvent( new Event( Event.COMPLETE ) );		}				public function onOutCancel( mouseEvent:MouseEvent):void		{			removeEventListener( MouseEvent.ROLL_OUT, onOutCancel );						cancelInvBitmap.visible = false;						stage.addEventListener( MouseEvent.MOUSE_UP, onCancelStageUp, false, 0, true );			addEventListener( MouseEvent.ROLL_OVER, onDownCancel, false, 0, true );		}				public function onCancelStageUp( mouseEvent:MouseEvent):void		{			stage.removeEventListener( MouseEvent.MOUSE_UP, onCancelStageUp );						removeEventListener( MouseEvent.ROLL_OVER, onDownCancel );						addEventListener( MouseEvent.MOUSE_DOWN, onDownCancel, false, 0, true );		}	}}